stages:
  - build
  # - test
  # - cleanup

variables: &globalvars
    ADDON_CATEGORIES: "--private"
    CI_IMAGE: "gcr.io/$GCLOUD_PROJECT/$CI_PROJECT_NAME-$ODOO_MINOR"
    CI_TEST_IMAGE: "gcr.io/$GCLOUD_PROJECT/$CI_PROJECT_NAME-$ODOO_MINOR-test"
    GIT_DEPTH: "3"
    GIT_STRATEGY: none
    GIT_HOST: "git@gitlab.pledra.com:pledra"
    GIT_DOCKER_PROJECT_REPO: "docker-odoo-product-configurator"
    GCLOUD_PROJECT: "pledra-1"
    GCLOUD_ZONE: "europe-west1-b"
    # K8S_CLUSTER: "pledra"
    # K8S_DEPLOYMENT_LABELS: "type=server,release=parker-v12-staging"
    # K8S_NAMESPACE: "default"
    ODOO_REPO: "odoo/odoo"
    ODOO_MINOR: "11.0"
    ODOO_STAGING_BRANCH: "11.0-staging"
    PSQL_VERSION: "10.0"
    PGHOST: "localhost"
    POSTGRES_DB: test
    POSTGRES_USER: odoo
    POSTGRES_PASSWORD: "odoopassword"
    PRIVATE_DIR: "./odoo/custom/src/private"

before_script:
    - eval "$(ssh-agent -s)"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - ssh-keyscan gitlab.pledra.com >> ~/.ssh/known_hosts
    - echo "$SSH_CONFIG" > ~/.ssh/config
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add  - > /dev/null
    - echo "$SSH_ENTERPRISE_PRIVATE_KEY" | tr -d '\r' | ssh-add  - > /dev/null
    - chmod 600 ~/.ssh/ -R
    - echo $GCE_SERVICE_ACCOUNT_JSON > /service_account.json

Build:
 image: google/cloud-sdk:latest
 stage: build
 variables:
   <<: *globalvars
   GIT_STRATEGY: clone
 script:
   # Authenticate to gain access to gcloud services for this project
   - gcloud auth activate-service-account --key-file=/service_account.json --project=$GCLOUD_PROJECT
   # Checkout scaffolding
   - git fetch origin scaffolding && git checkout scaffolding
   # Add a worktree for the CI branch and set to private
   - git worktree add ./odoo/custom/src/private/__ci_project_dir $CI_COMMIT_SHA
   - cp $PRIVATE_DIR/__ci_project_dir/* $PRIVATE_DIR -R && rm -rf $PRIVATE_DIR/__ci_project_dir
   # Install yaml dependency
   - apt install python3-yaml -y
   # Send source to google cloud builder
   - ci/image build      
 retry: 1

# Test Addons:
#   services:
#     - name: postgres:10.0-alpine
#   image: ${CI_TEST_IMAGE}:${CI_PIPELINE_ID}
#   stage: test
#   before_script: []
#   script:
#     # Execute entrypoint to wait for db to be ready and other things
#     - /opt/odoo/common/entrypoint
#     # Initialize the database and install all the repository modules
#     - addons init -i $ADDON_CATEGORIES
#     # Execute coverage tests on the initialized database
#     - qa_coverage
#     # Move coverage report
#     - mv /qa/artifacts/coverage .
#   artifacts:
#     paths:
#       - coverage
#     when: always
#   coverage: /TOTAL.* (\d+)%/

# Pylint Loose: &pylint
#   image: ${CI_TEST_IMAGE}:${CI_PIPELINE_ID}
#   stage: test
#   before_script: []
#   script:
#     - qa_pylint

# Pylint Strict:
#   <<: *pylint
#   variables:
#     LINT_MODE: "pr"
#   except:
#     - ^\d+\.\d+$

# Pylint Strict Warnings:
#   <<: *pylint
#   allow_failure: true
#   only:
#     - ^\d+\.\d+$

# Pylint Beta:
#   <<: *pylint
#   variables:
#     LINT_MODE: "beta"
#   allow_failure: true

# Flake8:
#   image: ${CI_TEST_IMAGE}:${CI_PIPELINE_ID}
#   stage: test
#   before_script: []
#   script:
#     - qa_flake8


#deploy_staging:
#  image: google/cloud-sdk:alpine
#  stage: deploy
#  script:
#    - gcloud auth activate-service-account --key-file=service_account.json
#    - gcloud components install kubectl
#    - gcloud container clusters get-credentials $KUBE_CLUSTER --zone $KUBE_ZONE --project $KUBE_PROJECT
#    - kubectl config set-context $(kubectl config current-context) --namespace=$KUBE_NAMESPACE
#    - export SERVER_DEPLOYMENT=`kubectl get deployment -l app=odoo-doodba -l type=server -o json --output=jsonpath={.items..metadata.name}`
#    - kubectl set image deployment/$SERVER_DEPLOYMENT server=us.gcr.io/$KUBE_PROJECT/simply-solar-staging:$CI_PIPELINE_ID
#    - kubectl rollout status deployment $SERVER_DEPLOYMENT
#    - echo "Updating all modules"
#    - export ODOO_SERVER_POD=`kubectl get pods -l app=odoo-doodbe -l type=server -o json --output=jsonpath={.items..metadata.name}`
#    - kubectl exec -it $ODOO_SERVER_POD -c server odoo -- -d $ODOO_DB -u base -i web_environment_ribbon --no-xmlrpc --stop-after-init
#  environment:
#    name: staging
#    url: https://simplysolar.turnpack.com
#  only:
#    - /^.*-staging$/
#  retry: 1

#deploy_prod:
#  stage: deploy
#  script:
#    - echo "Deploy to production server"
#  environment:
#    name: production
#    url: https://simplysolar.turnpack.com
#  when: manual
#  only:
#    - /^.*-(staging|test)$/

# Cleanup:
#   image: google/cloud-sdk:alpine
#   stage: cleanup
#   script:
#     - export LATEST_IMG_TAG_DATE=$(gcloud container images list-tags $CI_IMAGE --filter=tags:latest --format="value(timestamp)")
#     - export LATEST_TEST_IMG_TAG_DATE=$(gcloud container images list-tags $CI_TEST_IMAGE --filter=tags:latest --format="value(timestamp)")
#     - export OBSOLETE_IMAGE_DIGESTS=$(gcloud container images list-tags $CI_IMAGE --filter="timestamp.datetime < $LATEST_IMG_TAG_DATE" --format='get(digest)')
#     - export OBSOLETE_TEST_IMAGE_DIGESTS=$(gcloud container images list-tags $CI_TEST_IMAGE --filter="timestamp.datetime < $LATEST_TEST_IMG_TAG_DATE" --format='get(digest)')
#     - for IMG_DIGEST in $OBSOLETE_IMAGE_DIGESTS; do gcloud container images delete --force-delete-tags --quiet $CI_IMAGE@$IMG_DIGEST; done
#     - for IMG_DIGEST in $OBSOLETE_TEST_IMAGE_DIGESTS; do gcloud container images delete --force-delete-tags --quiet $CI_TEST_IMAGE@$IMG_DIGEST; done

