stages:
  - build
  - test
  # - cleanup

variables: &globalvars
    ADDON_CATEGORIES: "--private"
    CI_IMAGE: "gcr.io/pledra-1/product-configurator"
    GIT_DEPTH: "3"
    GIT_STRATEGY: none
    GIT_HOST: "git@gitlab.pledra.com:pledra"
    GIT_DOCKER_PROJECT_REPO: "docker-odoo-product-configurator"
    GCLOUD_PROJECT: "pledra-1"
    GCLOUD_ZONE: "europe-west1-b"
    # K8S_CLUSTER: "pledra"
    # K8S_DEPLOYMENT_LABELS: "type=server,release=parker-v12-staging"
    # K8S_NAMESPACE: "default"
    ODOO_REPO: "odoo/odoo"
    ODOO_MINOR: "12.0"
    CI_IMAGE_TAG: "12.0-${CI_COMMIT_SHA}"
    ODOO_STAGING_BRANCH: "12.0-staging"
    PSQL_VERSION: "10.0"
    PGHOST: "localhost"
    POSTGRES_DB: test
    POSTGRES_USER: odoo
    POSTGRES_PASSWORD: "odoopassword"
    PRIVATE_DIR: "./odoo/custom/src/private"

Build:
  image: google/cloud-sdk:latest
  stage: build
  variables:
    <<: *globalvars
    GIT_STRATEGY: clone
  script:
    # Login to gcloud
    - echo $GCE_SERVICE_ACCOUNT_JSON > /service_account.json
    # Authenticate to gain access to gcloud services for this project
    - gcloud auth activate-service-account --key-file=/service_account.json --project=$GCLOUD_PROJECT
    # Checkout scaffolding
    - git fetch origin scaffolding-${ODOO_MINOR} && git checkout scaffolding-${ODOO_MINOR}
    # Add a worktree for the CI branch and set to private
    - git worktree add ./odoo/custom/src/private/__ci_project_dir $CI_COMMIT_SHA
    - cp $PRIVATE_DIR/__ci_project_dir/* $PRIVATE_DIR -R && rm -rf $PRIVATE_DIR/__ci_project_dir
    # Install yaml dependency
    - apt install python3-yaml -y
    # Send source to google cloud builder
    - ci/image build      
  retry:
    max: 2
    when: runner_system_failure
  only:
    refs:
      - /^[0-9]{1,2}\.0-.*$/


Test Addons:
  services:
    - name: postgres:10.0-alpine
  image: ${CI_IMAGE}:${CI_IMAGE_TAG}
  stage: test
  variables:
    <<: *globalvars
    ODOO_CFG_WITHOUT_DEMO: "False"
  script:
    # Execute entrypoint to wait for db to be ready and other things
    - /opt/odoo/common/entrypoint
    # Initialize the qa virtualenvironment
    - source /qa/venv/bin/activate
    # Initialize the database and install all the repository modules
    - addons init -i $ADDON_CATEGORIES
    # Execute coverage tests on the initialized database
    - test-coverage
    # Move coverage report
    - mv /qa/artifacts/coverage .
  artifacts:
    paths:
      - coverage
    when: always
  coverage: /TOTAL.* (\d+)%/
  retry:
    max: 2
    when: runner_system_failure
  only:
    refs:
      - /^[0-9]{1,2}\.0-.*$/

Pylint Loose: &pylint
  image: ${CI_IMAGE}:${ODOO_MINOR}-${CI_COMMIT_SHA}
  stage: test
  before_script:
     # Initialize the qa virtualenvironment
    - source /qa/venv/bin/activate
  script:
    - test-pylint
  retry:
    max: 2
    when: runner_system_failure
  only:
    refs:
      - /^[0-9]{1,2}\.0-.*$/

Pylint Strict:
  <<: *pylint
  variables:
    LINT_MODE: "pr"
  except:
    - ^\d+\.\d+$

Pylint Strict Warnings:
  <<: *pylint
  allow_failure: true
  only:
    - ^\d+\.\d+$

Pylint Beta:
  <<: *pylint
  variables:
    LINT_MODE: "beta"
  allow_failure: true

Flake8:
  image: ${CI_IMAGE}:${CI_IMAGE_TAG}
  stage: test
  before_script:
    # Initialize the qa virtualenvironment
    - source /qa/venv/bin/activate 
  script:
    - test-flake8
  retry:
    max: 2
    when: runner_system_failure
  only:
    refs:
      - /^[0-9]{1,2}\.0-.*$/
